# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Xdmf', [dirname(__file__)])
        except ImportError:
            import _Xdmf
            return _Xdmf
        if fp is not None:
            try:
                _mod = imp.load_module('_Xdmf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Xdmf = swig_import_helper()
    del swig_import_helper
else:
    import _Xdmf
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Xdmf.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Xdmf.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Xdmf.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Xdmf.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Xdmf.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Xdmf.SwigPyIterator_equal(self, *args)
    def copy(self): return _Xdmf.SwigPyIterator_copy(self)
    def next(self): return _Xdmf.SwigPyIterator_next(self)
    def __next__(self): return _Xdmf.SwigPyIterator___next__(self)
    def previous(self): return _Xdmf.SwigPyIterator_previous(self)
    def advance(self, *args): return _Xdmf.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Xdmf.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Xdmf.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Xdmf.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Xdmf.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Xdmf.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Xdmf.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Xdmf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class XdmfGeometryPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGeometryPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGeometryPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfGeometryPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfGeometryPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfGeometryPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfGeometryPtr_New(self)
    def printSelf(self): return _Xdmf.XdmfGeometryPtr_printSelf(self)
XdmfGeometryPtr_swigregister = _Xdmf.XdmfGeometryPtr_swigregister
XdmfGeometryPtr_swigregister(XdmfGeometryPtr)

class XdmfGridPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGridPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGridPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfGridPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfGridPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfGridPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfGridPtr_New(self)
    def getGeometry(self): return _Xdmf.XdmfGridPtr_getGeometry(self)
    def setGeometry(self, *args): return _Xdmf.XdmfGridPtr_setGeometry(self, *args)
    def getTopology(self): return _Xdmf.XdmfGridPtr_getTopology(self)
    def setTopology(self, *args): return _Xdmf.XdmfGridPtr_setTopology(self, *args)
    def printSelf(self): return _Xdmf.XdmfGridPtr_printSelf(self)
XdmfGridPtr_swigregister = _Xdmf.XdmfGridPtr_swigregister
XdmfGridPtr_swigregister(XdmfGridPtr)

class XdmfObjPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfObjPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfObjPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfObjPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfObjPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfObjPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfObjPtr_New(self)
    def printSelf(self): return _Xdmf.XdmfObjPtr_printSelf(self)
XdmfObjPtr_swigregister = _Xdmf.XdmfObjPtr_swigregister
XdmfObjPtr_swigregister(XdmfObjPtr)

class XdmfTopologyPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfTopologyPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfTopologyPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfTopologyPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfTopologyPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfTopologyPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfTopologyPtr_New(self)
    def getXdmfTopologyType(self): return _Xdmf.XdmfTopologyPtr_getXdmfTopologyType(self)
    def setTopologyType(self, *args): return _Xdmf.XdmfTopologyPtr_setTopologyType(self, *args)
    def getTopologyTypeAsString(self): return _Xdmf.XdmfTopologyPtr_getTopologyTypeAsString(self)
    def printSelf(self): return _Xdmf.XdmfTopologyPtr_printSelf(self)
XdmfTopologyPtr_swigregister = _Xdmf.XdmfTopologyPtr_swigregister
XdmfTopologyPtr_swigregister(XdmfTopologyPtr)

class XdmfObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfObject_New
    if _newclass:New = staticmethod(_Xdmf.XdmfObject_New)
    def printSelf(self): return _Xdmf.XdmfObject_printSelf(self)
XdmfObject_swigregister = _Xdmf.XdmfObject_swigregister
XdmfObject_swigregister(XdmfObject)

def XdmfObject_New():
  return _Xdmf.XdmfObject_New()
XdmfObject_New = _Xdmf.XdmfObject_New

class XdmfGeometry(XdmfObject):
    __swig_setmethods__ = {}
    for _s in [XdmfObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGeometry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfGeometry_New
    if _newclass:New = staticmethod(_Xdmf.XdmfGeometry_New)
    def printSelf(self): return _Xdmf.XdmfGeometry_printSelf(self)
XdmfGeometry_swigregister = _Xdmf.XdmfGeometry_swigregister
XdmfGeometry_swigregister(XdmfGeometry)

def XdmfGeometry_New():
  return _Xdmf.XdmfGeometry_New()
XdmfGeometry_New = _Xdmf.XdmfGeometry_New

class XdmfGrid(XdmfObject):
    __swig_setmethods__ = {}
    for _s in [XdmfObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGrid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfGrid_New
    if _newclass:New = staticmethod(_Xdmf.XdmfGrid_New)
    def getGeometry(self): return _Xdmf.XdmfGrid_getGeometry(self)
    def setGeometry(self, *args): return _Xdmf.XdmfGrid_setGeometry(self, *args)
    def getTopology(self): return _Xdmf.XdmfGrid_getTopology(self)
    def setTopology(self, *args): return _Xdmf.XdmfGrid_setTopology(self, *args)
    def printSelf(self): return _Xdmf.XdmfGrid_printSelf(self)
XdmfGrid_swigregister = _Xdmf.XdmfGrid_swigregister
XdmfGrid_swigregister(XdmfGrid)

def XdmfGrid_New():
  return _Xdmf.XdmfGrid_New()
XdmfGrid_New = _Xdmf.XdmfGrid_New

class XdmfTopologyType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfTopologyType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfTopologyType, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["numberVertices"] = _Xdmf.XdmfTopologyType_numberVertices_get
    if _newclass:numberVertices = _swig_property(_Xdmf.XdmfTopologyType_numberVertices_get)
    __swig_getmethods__["name"] = _Xdmf.XdmfTopologyType_name_get
    if _newclass:name = _swig_property(_Xdmf.XdmfTopologyType_name_get)
    def __eq__(self, *args): return _Xdmf.XdmfTopologyType___eq__(self, *args)
    def __ne__(self, *args): return _Xdmf.XdmfTopologyType___ne__(self, *args)
    __swig_destroy__ = _Xdmf.delete_XdmfTopologyType
    __del__ = lambda self : None;
XdmfTopologyType_swigregister = _Xdmf.XdmfTopologyType_swigregister
XdmfTopologyType_swigregister(XdmfTopologyType)
cvar = _Xdmf.cvar
XdmfTopologyType.NoTopology = _Xdmf.cvar.XdmfTopologyType_NoTopology
XdmfTopologyType.Polyvertex = _Xdmf.cvar.XdmfTopologyType_Polyvertex
XdmfTopologyType.Polyline = _Xdmf.cvar.XdmfTopologyType_Polyline
XdmfTopologyType.Polygon = _Xdmf.cvar.XdmfTopologyType_Polygon
XdmfTopologyType.Triangle = _Xdmf.cvar.XdmfTopologyType_Triangle
XdmfTopologyType.Quadrilateral = _Xdmf.cvar.XdmfTopologyType_Quadrilateral
XdmfTopologyType.Tetrahedron = _Xdmf.cvar.XdmfTopologyType_Tetrahedron
XdmfTopologyType.Pyramid = _Xdmf.cvar.XdmfTopologyType_Pyramid
XdmfTopologyType.Wedge = _Xdmf.cvar.XdmfTopologyType_Wedge
XdmfTopologyType.Hexahedron = _Xdmf.cvar.XdmfTopologyType_Hexahedron
XdmfTopologyType.Edge_3 = _Xdmf.cvar.XdmfTopologyType_Edge_3
XdmfTopologyType.Triangle_6 = _Xdmf.cvar.XdmfTopologyType_Triangle_6
XdmfTopologyType.Quadrilateral_8 = _Xdmf.cvar.XdmfTopologyType_Quadrilateral_8
XdmfTopologyType.Tetrahedron_10 = _Xdmf.cvar.XdmfTopologyType_Tetrahedron_10
XdmfTopologyType.Pyramid_13 = _Xdmf.cvar.XdmfTopologyType_Pyramid_13
XdmfTopologyType.Wedge_15 = _Xdmf.cvar.XdmfTopologyType_Wedge_15
XdmfTopologyType.Hexahedron_20 = _Xdmf.cvar.XdmfTopologyType_Hexahedron_20
XdmfTopologyType.Mixed = _Xdmf.cvar.XdmfTopologyType_Mixed
XdmfTopologyType.TwoDSMesh = _Xdmf.cvar.XdmfTopologyType_TwoDSMesh
XdmfTopologyType.TwoDRectMesh = _Xdmf.cvar.XdmfTopologyType_TwoDRectMesh
XdmfTopologyType.TwoDCoRectMesh = _Xdmf.cvar.XdmfTopologyType_TwoDCoRectMesh
XdmfTopologyType.ThreeDSMesh = _Xdmf.cvar.XdmfTopologyType_ThreeDSMesh
XdmfTopologyType.ThreeDRectMesh = _Xdmf.cvar.XdmfTopologyType_ThreeDRectMesh
XdmfTopologyType.ThreeDCoRectMesh = _Xdmf.cvar.XdmfTopologyType_ThreeDCoRectMesh

class XdmfTopology(XdmfObject):
    __swig_setmethods__ = {}
    for _s in [XdmfObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfTopology, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfTopology, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfTopology_New
    if _newclass:New = staticmethod(_Xdmf.XdmfTopology_New)
    def getXdmfTopologyType(self): return _Xdmf.XdmfTopology_getXdmfTopologyType(self)
    def setTopologyType(self, *args): return _Xdmf.XdmfTopology_setTopologyType(self, *args)
    def getTopologyTypeAsString(self): return _Xdmf.XdmfTopology_getTopologyTypeAsString(self)
    def printSelf(self): return _Xdmf.XdmfTopology_printSelf(self)
XdmfTopology_swigregister = _Xdmf.XdmfTopology_swigregister
XdmfTopology_swigregister(XdmfTopology)

def XdmfTopology_New():
  return _Xdmf.XdmfTopology_New()
XdmfTopology_New = _Xdmf.XdmfTopology_New



