# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.37
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_Xdmf', [dirname(__file__)])
            _mod = imp.load_module('_Xdmf', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _Xdmf = swig_import_helper()
    del swig_import_helper
else:
    import _Xdmf
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Xdmf.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Xdmf.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Xdmf.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Xdmf.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Xdmf.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Xdmf.SwigPyIterator_equal(self, *args)
    def copy(self): return _Xdmf.SwigPyIterator_copy(self)
    def next(self): return _Xdmf.SwigPyIterator_next(self)
    def __next__(self): return _Xdmf.SwigPyIterator___next__(self)
    def previous(self): return _Xdmf.SwigPyIterator_previous(self)
    def advance(self, *args): return _Xdmf.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Xdmf.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Xdmf.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Xdmf.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Xdmf.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Xdmf.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Xdmf.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Xdmf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class XdmfAttributePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfAttributePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfAttributePtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfAttributePtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfAttributePtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfAttributePtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfAttributePtr_New(self)
    def getName(self): return _Xdmf.XdmfAttributePtr_getName(self)
    def setName(self, *args): return _Xdmf.XdmfAttributePtr_setName(self, *args)
    def getAttributeType(self): return _Xdmf.XdmfAttributePtr_getAttributeType(self)
    def getAttributeTypeAsString(self): return _Xdmf.XdmfAttributePtr_getAttributeTypeAsString(self)
    def setAttributeType(self, *args): return _Xdmf.XdmfAttributePtr_setAttributeType(self, *args)
    def write(self, *args): return _Xdmf.XdmfAttributePtr_write(self, *args)
    def printSelf(self): return _Xdmf.XdmfAttributePtr_printSelf(self)
XdmfAttributePtr_swigregister = _Xdmf.XdmfAttributePtr_swigregister
XdmfAttributePtr_swigregister(XdmfAttributePtr)

class XdmfGeometryPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGeometryPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGeometryPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfGeometryPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfGeometryPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfGeometryPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfGeometryPtr_New(self)
    def getGeometryType(self): return _Xdmf.XdmfGeometryPtr_getGeometryType(self)
    def setGeometryType(self, *args): return _Xdmf.XdmfGeometryPtr_setGeometryType(self, *args)
    def getGeometryTypeAsString(self): return _Xdmf.XdmfGeometryPtr_getGeometryTypeAsString(self)
    def getDimensions(self): return _Xdmf.XdmfGeometryPtr_getDimensions(self)
    def printSelf(self): return _Xdmf.XdmfGeometryPtr_printSelf(self)
    def write(self, *args): return _Xdmf.XdmfGeometryPtr_write(self, *args)
XdmfGeometryPtr_swigregister = _Xdmf.XdmfGeometryPtr_swigregister
XdmfGeometryPtr_swigregister(XdmfGeometryPtr)

class XdmfGridPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGridPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGridPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfGridPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfGridPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfGridPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfGridPtr_New(self)
    def getGeometry(self, *args): return _Xdmf.XdmfGridPtr_getGeometry(self, *args)
    def setGeometry(self, *args): return _Xdmf.XdmfGridPtr_setGeometry(self, *args)
    def getTopology(self, *args): return _Xdmf.XdmfGridPtr_getTopology(self, *args)
    def setTopology(self, *args): return _Xdmf.XdmfGridPtr_setTopology(self, *args)
    def getName(self): return _Xdmf.XdmfGridPtr_getName(self)
    def setName(self, *args): return _Xdmf.XdmfGridPtr_setName(self, *args)
    def printSelf(self): return _Xdmf.XdmfGridPtr_printSelf(self)
    def write(self, *args): return _Xdmf.XdmfGridPtr_write(self, *args)
XdmfGridPtr_swigregister = _Xdmf.XdmfGridPtr_swigregister
XdmfGridPtr_swigregister(XdmfGridPtr)

class XdmfItemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfItemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfItemPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfItemPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfItemPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfItemPtr
    __del__ = lambda self : None;
    def write(self, *args): return _Xdmf.XdmfItemPtr_write(self, *args)
    def printSelf(self): return _Xdmf.XdmfItemPtr_printSelf(self)
XdmfItemPtr_swigregister = _Xdmf.XdmfItemPtr_swigregister
XdmfItemPtr_swigregister(XdmfItemPtr)

class XdmfObjPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfObjPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfObjPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfObjPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfObjPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfObjPtr
    __del__ = lambda self : None;
    def printSelf(self): return _Xdmf.XdmfObjPtr_printSelf(self)
XdmfObjPtr_swigregister = _Xdmf.XdmfObjPtr_swigregister
XdmfObjPtr_swigregister(XdmfObjPtr)

class XdmfTopologyPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfTopologyPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfTopologyPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfTopologyPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfTopologyPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfTopologyPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfTopologyPtr_New(self)
    def getTopologyType(self): return _Xdmf.XdmfTopologyPtr_getTopologyType(self)
    def setTopologyType(self, *args): return _Xdmf.XdmfTopologyPtr_setTopologyType(self, *args)
    def getNumberElements(self): return _Xdmf.XdmfTopologyPtr_getNumberElements(self)
    def setNumberElements(self, *args): return _Xdmf.XdmfTopologyPtr_setNumberElements(self, *args)
    def getTopologyTypeAsString(self): return _Xdmf.XdmfTopologyPtr_getTopologyTypeAsString(self)
    def getNodesPerElement(self): return _Xdmf.XdmfTopologyPtr_getNodesPerElement(self)
    def printSelf(self): return _Xdmf.XdmfTopologyPtr_printSelf(self)
    def write(self, *args): return _Xdmf.XdmfTopologyPtr_write(self, *args)
XdmfTopologyPtr_swigregister = _Xdmf.XdmfTopologyPtr_swigregister
XdmfTopologyPtr_swigregister(XdmfTopologyPtr)

class XdmfVisitorPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfVisitorPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfVisitorPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Xdmf.XdmfVisitorPtr___deref__(self)
    def __init__(self): 
        this = _Xdmf.new_XdmfVisitorPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfVisitorPtr
    __del__ = lambda self : None;
    def New(self): return _Xdmf.XdmfVisitorPtr_New(self)
    def visit(self, *args): return _Xdmf.XdmfVisitorPtr_visit(self, *args)
    def printSelf(self): return _Xdmf.XdmfVisitorPtr_printSelf(self)
XdmfVisitorPtr_swigregister = _Xdmf.XdmfVisitorPtr_swigregister
XdmfVisitorPtr_swigregister(XdmfVisitorPtr)

class XdmfObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def printSelf(self): return _Xdmf.XdmfObject_printSelf(self)
XdmfObject_swigregister = _Xdmf.XdmfObject_swigregister
XdmfObject_swigregister(XdmfObject)

class XdmfItem(XdmfObject):
    __swig_setmethods__ = {}
    for _s in [XdmfObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfItem, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfItem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def write(self, *args): return _Xdmf.XdmfItem_write(self, *args)
XdmfItem_swigregister = _Xdmf.XdmfItem_swigregister
XdmfItem_swigregister(XdmfItem)

class XdmfVisitor(XdmfObject):
    __swig_setmethods__ = {}
    for _s in [XdmfObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfVisitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfVisitor_New
    if _newclass:New = staticmethod(_Xdmf.XdmfVisitor_New)
    def visit(self, *args): return _Xdmf.XdmfVisitor_visit(self, *args)
    def printSelf(self): return _Xdmf.XdmfVisitor_printSelf(self)
XdmfVisitor_swigregister = _Xdmf.XdmfVisitor_swigregister
XdmfVisitor_swigregister(XdmfVisitor)

def XdmfVisitor_New():
  return _Xdmf.XdmfVisitor_New()
XdmfVisitor_New = _Xdmf.XdmfVisitor_New

class XdmfAttributeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfAttributeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfAttributeType, name)
    __repr__ = _swig_repr
    __swig_getmethods__["NoAttributeType"] = lambda x: _Xdmf.XdmfAttributeType_NoAttributeType
    if _newclass:NoAttributeType = staticmethod(_Xdmf.XdmfAttributeType_NoAttributeType)
    __swig_getmethods__["Scalar"] = lambda x: _Xdmf.XdmfAttributeType_Scalar
    if _newclass:Scalar = staticmethod(_Xdmf.XdmfAttributeType_Scalar)
    __swig_getmethods__["Vector"] = lambda x: _Xdmf.XdmfAttributeType_Vector
    if _newclass:Vector = staticmethod(_Xdmf.XdmfAttributeType_Vector)
    __swig_getmethods__["Tensor"] = lambda x: _Xdmf.XdmfAttributeType_Tensor
    if _newclass:Tensor = staticmethod(_Xdmf.XdmfAttributeType_Tensor)
    __swig_getmethods__["Matrix"] = lambda x: _Xdmf.XdmfAttributeType_Matrix
    if _newclass:Matrix = staticmethod(_Xdmf.XdmfAttributeType_Matrix)
    __swig_getmethods__["Tensor6"] = lambda x: _Xdmf.XdmfAttributeType_Tensor6
    if _newclass:Tensor6 = staticmethod(_Xdmf.XdmfAttributeType_Tensor6)
    __swig_getmethods__["GlobalId"] = lambda x: _Xdmf.XdmfAttributeType_GlobalId
    if _newclass:GlobalId = staticmethod(_Xdmf.XdmfAttributeType_GlobalId)
    def getName(self): return _Xdmf.XdmfAttributeType_getName(self)
    def __eq__(self, *args): return _Xdmf.XdmfAttributeType___eq__(self, *args)
    def __ne__(self, *args): return _Xdmf.XdmfAttributeType___ne__(self, *args)
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfAttributeType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfAttributeType
    __del__ = lambda self : None;
XdmfAttributeType_swigregister = _Xdmf.XdmfAttributeType_swigregister
XdmfAttributeType_swigregister(XdmfAttributeType)

def XdmfAttributeType_NoAttributeType():
  return _Xdmf.XdmfAttributeType_NoAttributeType()
XdmfAttributeType_NoAttributeType = _Xdmf.XdmfAttributeType_NoAttributeType

def XdmfAttributeType_Scalar():
  return _Xdmf.XdmfAttributeType_Scalar()
XdmfAttributeType_Scalar = _Xdmf.XdmfAttributeType_Scalar

def XdmfAttributeType_Vector():
  return _Xdmf.XdmfAttributeType_Vector()
XdmfAttributeType_Vector = _Xdmf.XdmfAttributeType_Vector

def XdmfAttributeType_Tensor():
  return _Xdmf.XdmfAttributeType_Tensor()
XdmfAttributeType_Tensor = _Xdmf.XdmfAttributeType_Tensor

def XdmfAttributeType_Matrix():
  return _Xdmf.XdmfAttributeType_Matrix()
XdmfAttributeType_Matrix = _Xdmf.XdmfAttributeType_Matrix

def XdmfAttributeType_Tensor6():
  return _Xdmf.XdmfAttributeType_Tensor6()
XdmfAttributeType_Tensor6 = _Xdmf.XdmfAttributeType_Tensor6

def XdmfAttributeType_GlobalId():
  return _Xdmf.XdmfAttributeType_GlobalId()
XdmfAttributeType_GlobalId = _Xdmf.XdmfAttributeType_GlobalId

class XdmfAttribute(XdmfItem):
    __swig_setmethods__ = {}
    for _s in [XdmfItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfAttribute, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfAttribute_New
    if _newclass:New = staticmethod(_Xdmf.XdmfAttribute_New)
    def getName(self): return _Xdmf.XdmfAttribute_getName(self)
    def setName(self, *args): return _Xdmf.XdmfAttribute_setName(self, *args)
    def getAttributeType(self): return _Xdmf.XdmfAttribute_getAttributeType(self)
    def getAttributeTypeAsString(self): return _Xdmf.XdmfAttribute_getAttributeTypeAsString(self)
    def setAttributeType(self, *args): return _Xdmf.XdmfAttribute_setAttributeType(self, *args)
    def write(self, *args): return _Xdmf.XdmfAttribute_write(self, *args)
    def printSelf(self): return _Xdmf.XdmfAttribute_printSelf(self)
XdmfAttribute_swigregister = _Xdmf.XdmfAttribute_swigregister
XdmfAttribute_swigregister(XdmfAttribute)

def XdmfAttribute_New():
  return _Xdmf.XdmfAttribute_New()
XdmfAttribute_New = _Xdmf.XdmfAttribute_New

class XdmfGeometryType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGeometryType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGeometryType, name)
    __repr__ = _swig_repr
    __swig_getmethods__["NoGeometryType"] = lambda x: _Xdmf.XdmfGeometryType_NoGeometryType
    if _newclass:NoGeometryType = staticmethod(_Xdmf.XdmfGeometryType_NoGeometryType)
    __swig_getmethods__["XYZ"] = lambda x: _Xdmf.XdmfGeometryType_XYZ
    if _newclass:XYZ = staticmethod(_Xdmf.XdmfGeometryType_XYZ)
    __swig_getmethods__["XY"] = lambda x: _Xdmf.XdmfGeometryType_XY
    if _newclass:XY = staticmethod(_Xdmf.XdmfGeometryType_XY)
    __swig_getmethods__["X_Y_Z"] = lambda x: _Xdmf.XdmfGeometryType_X_Y_Z
    if _newclass:X_Y_Z = staticmethod(_Xdmf.XdmfGeometryType_X_Y_Z)
    __swig_getmethods__["X_Y"] = lambda x: _Xdmf.XdmfGeometryType_X_Y
    if _newclass:X_Y = staticmethod(_Xdmf.XdmfGeometryType_X_Y)
    __swig_getmethods__["VXVYVZ"] = lambda x: _Xdmf.XdmfGeometryType_VXVYVZ
    if _newclass:VXVYVZ = staticmethod(_Xdmf.XdmfGeometryType_VXVYVZ)
    __swig_getmethods__["Origin_DXDYDZ"] = lambda x: _Xdmf.XdmfGeometryType_Origin_DXDYDZ
    if _newclass:Origin_DXDYDZ = staticmethod(_Xdmf.XdmfGeometryType_Origin_DXDYDZ)
    __swig_getmethods__["VXVY"] = lambda x: _Xdmf.XdmfGeometryType_VXVY
    if _newclass:VXVY = staticmethod(_Xdmf.XdmfGeometryType_VXVY)
    __swig_getmethods__["Origin_DXDY"] = lambda x: _Xdmf.XdmfGeometryType_Origin_DXDY
    if _newclass:Origin_DXDY = staticmethod(_Xdmf.XdmfGeometryType_Origin_DXDY)
    def getDimensions(self): return _Xdmf.XdmfGeometryType_getDimensions(self)
    def getName(self): return _Xdmf.XdmfGeometryType_getName(self)
    def __eq__(self, *args): return _Xdmf.XdmfGeometryType___eq__(self, *args)
    def __ne__(self, *args): return _Xdmf.XdmfGeometryType___ne__(self, *args)
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfGeometryType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfGeometryType
    __del__ = lambda self : None;
XdmfGeometryType_swigregister = _Xdmf.XdmfGeometryType_swigregister
XdmfGeometryType_swigregister(XdmfGeometryType)

def XdmfGeometryType_NoGeometryType():
  return _Xdmf.XdmfGeometryType_NoGeometryType()
XdmfGeometryType_NoGeometryType = _Xdmf.XdmfGeometryType_NoGeometryType

def XdmfGeometryType_XYZ():
  return _Xdmf.XdmfGeometryType_XYZ()
XdmfGeometryType_XYZ = _Xdmf.XdmfGeometryType_XYZ

def XdmfGeometryType_XY():
  return _Xdmf.XdmfGeometryType_XY()
XdmfGeometryType_XY = _Xdmf.XdmfGeometryType_XY

def XdmfGeometryType_X_Y_Z():
  return _Xdmf.XdmfGeometryType_X_Y_Z()
XdmfGeometryType_X_Y_Z = _Xdmf.XdmfGeometryType_X_Y_Z

def XdmfGeometryType_X_Y():
  return _Xdmf.XdmfGeometryType_X_Y()
XdmfGeometryType_X_Y = _Xdmf.XdmfGeometryType_X_Y

def XdmfGeometryType_VXVYVZ():
  return _Xdmf.XdmfGeometryType_VXVYVZ()
XdmfGeometryType_VXVYVZ = _Xdmf.XdmfGeometryType_VXVYVZ

def XdmfGeometryType_Origin_DXDYDZ():
  return _Xdmf.XdmfGeometryType_Origin_DXDYDZ()
XdmfGeometryType_Origin_DXDYDZ = _Xdmf.XdmfGeometryType_Origin_DXDYDZ

def XdmfGeometryType_VXVY():
  return _Xdmf.XdmfGeometryType_VXVY()
XdmfGeometryType_VXVY = _Xdmf.XdmfGeometryType_VXVY

def XdmfGeometryType_Origin_DXDY():
  return _Xdmf.XdmfGeometryType_Origin_DXDY()
XdmfGeometryType_Origin_DXDY = _Xdmf.XdmfGeometryType_Origin_DXDY

class XdmfGeometry(XdmfItem):
    __swig_setmethods__ = {}
    for _s in [XdmfItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGeometry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfGeometry_New
    if _newclass:New = staticmethod(_Xdmf.XdmfGeometry_New)
    def getGeometryType(self): return _Xdmf.XdmfGeometry_getGeometryType(self)
    def setGeometryType(self, *args): return _Xdmf.XdmfGeometry_setGeometryType(self, *args)
    def getGeometryTypeAsString(self): return _Xdmf.XdmfGeometry_getGeometryTypeAsString(self)
    def getDimensions(self): return _Xdmf.XdmfGeometry_getDimensions(self)
    def printSelf(self): return _Xdmf.XdmfGeometry_printSelf(self)
    def write(self, *args): return _Xdmf.XdmfGeometry_write(self, *args)
XdmfGeometry_swigregister = _Xdmf.XdmfGeometry_swigregister
XdmfGeometry_swigregister(XdmfGeometry)

def XdmfGeometry_New():
  return _Xdmf.XdmfGeometry_New()
XdmfGeometry_New = _Xdmf.XdmfGeometry_New

class XdmfGrid(XdmfItem):
    __swig_setmethods__ = {}
    for _s in [XdmfItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfGrid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfGrid_New
    if _newclass:New = staticmethod(_Xdmf.XdmfGrid_New)
    def getGeometry(self, *args): return _Xdmf.XdmfGrid_getGeometry(self, *args)
    def setGeometry(self, *args): return _Xdmf.XdmfGrid_setGeometry(self, *args)
    def getTopology(self, *args): return _Xdmf.XdmfGrid_getTopology(self, *args)
    def setTopology(self, *args): return _Xdmf.XdmfGrid_setTopology(self, *args)
    def getName(self): return _Xdmf.XdmfGrid_getName(self)
    def setName(self, *args): return _Xdmf.XdmfGrid_setName(self, *args)
    def printSelf(self): return _Xdmf.XdmfGrid_printSelf(self)
    def write(self, *args): return _Xdmf.XdmfGrid_write(self, *args)
XdmfGrid_swigregister = _Xdmf.XdmfGrid_swigregister
XdmfGrid_swigregister(XdmfGrid)

def XdmfGrid_New():
  return _Xdmf.XdmfGrid_New()
XdmfGrid_New = _Xdmf.XdmfGrid_New

class XdmfTopologyType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfTopologyType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfTopologyType, name)
    __repr__ = _swig_repr
    NoCellType = _Xdmf.XdmfTopologyType_NoCellType
    Linear = _Xdmf.XdmfTopologyType_Linear
    Quadratic = _Xdmf.XdmfTopologyType_Quadratic
    Arbitrary = _Xdmf.XdmfTopologyType_Arbitrary
    Structured = _Xdmf.XdmfTopologyType_Structured
    __swig_getmethods__["NoTopologyType"] = lambda x: _Xdmf.XdmfTopologyType_NoTopologyType
    if _newclass:NoTopologyType = staticmethod(_Xdmf.XdmfTopologyType_NoTopologyType)
    __swig_getmethods__["Polyvertex"] = lambda x: _Xdmf.XdmfTopologyType_Polyvertex
    if _newclass:Polyvertex = staticmethod(_Xdmf.XdmfTopologyType_Polyvertex)
    __swig_getmethods__["Polyline"] = lambda x: _Xdmf.XdmfTopologyType_Polyline
    if _newclass:Polyline = staticmethod(_Xdmf.XdmfTopologyType_Polyline)
    __swig_getmethods__["Polygon"] = lambda x: _Xdmf.XdmfTopologyType_Polygon
    if _newclass:Polygon = staticmethod(_Xdmf.XdmfTopologyType_Polygon)
    __swig_getmethods__["Triangle"] = lambda x: _Xdmf.XdmfTopologyType_Triangle
    if _newclass:Triangle = staticmethod(_Xdmf.XdmfTopologyType_Triangle)
    __swig_getmethods__["Quadrilateral"] = lambda x: _Xdmf.XdmfTopologyType_Quadrilateral
    if _newclass:Quadrilateral = staticmethod(_Xdmf.XdmfTopologyType_Quadrilateral)
    __swig_getmethods__["Tetrahedron"] = lambda x: _Xdmf.XdmfTopologyType_Tetrahedron
    if _newclass:Tetrahedron = staticmethod(_Xdmf.XdmfTopologyType_Tetrahedron)
    __swig_getmethods__["Pyramid"] = lambda x: _Xdmf.XdmfTopologyType_Pyramid
    if _newclass:Pyramid = staticmethod(_Xdmf.XdmfTopologyType_Pyramid)
    __swig_getmethods__["Wedge"] = lambda x: _Xdmf.XdmfTopologyType_Wedge
    if _newclass:Wedge = staticmethod(_Xdmf.XdmfTopologyType_Wedge)
    __swig_getmethods__["Hexahedron"] = lambda x: _Xdmf.XdmfTopologyType_Hexahedron
    if _newclass:Hexahedron = staticmethod(_Xdmf.XdmfTopologyType_Hexahedron)
    __swig_getmethods__["Edge_3"] = lambda x: _Xdmf.XdmfTopologyType_Edge_3
    if _newclass:Edge_3 = staticmethod(_Xdmf.XdmfTopologyType_Edge_3)
    __swig_getmethods__["Triangle_6"] = lambda x: _Xdmf.XdmfTopologyType_Triangle_6
    if _newclass:Triangle_6 = staticmethod(_Xdmf.XdmfTopologyType_Triangle_6)
    __swig_getmethods__["Quadrilateral_8"] = lambda x: _Xdmf.XdmfTopologyType_Quadrilateral_8
    if _newclass:Quadrilateral_8 = staticmethod(_Xdmf.XdmfTopologyType_Quadrilateral_8)
    __swig_getmethods__["Tetrahedron_10"] = lambda x: _Xdmf.XdmfTopologyType_Tetrahedron_10
    if _newclass:Tetrahedron_10 = staticmethod(_Xdmf.XdmfTopologyType_Tetrahedron_10)
    __swig_getmethods__["Pyramid_13"] = lambda x: _Xdmf.XdmfTopologyType_Pyramid_13
    if _newclass:Pyramid_13 = staticmethod(_Xdmf.XdmfTopologyType_Pyramid_13)
    __swig_getmethods__["Wedge_15"] = lambda x: _Xdmf.XdmfTopologyType_Wedge_15
    if _newclass:Wedge_15 = staticmethod(_Xdmf.XdmfTopologyType_Wedge_15)
    __swig_getmethods__["Hexahedron_20"] = lambda x: _Xdmf.XdmfTopologyType_Hexahedron_20
    if _newclass:Hexahedron_20 = staticmethod(_Xdmf.XdmfTopologyType_Hexahedron_20)
    __swig_getmethods__["Mixed"] = lambda x: _Xdmf.XdmfTopologyType_Mixed
    if _newclass:Mixed = staticmethod(_Xdmf.XdmfTopologyType_Mixed)
    __swig_getmethods__["TwoDSMesh"] = lambda x: _Xdmf.XdmfTopologyType_TwoDSMesh
    if _newclass:TwoDSMesh = staticmethod(_Xdmf.XdmfTopologyType_TwoDSMesh)
    __swig_getmethods__["TwoDRectMesh"] = lambda x: _Xdmf.XdmfTopologyType_TwoDRectMesh
    if _newclass:TwoDRectMesh = staticmethod(_Xdmf.XdmfTopologyType_TwoDRectMesh)
    __swig_getmethods__["TwoDCoRectMesh"] = lambda x: _Xdmf.XdmfTopologyType_TwoDCoRectMesh
    if _newclass:TwoDCoRectMesh = staticmethod(_Xdmf.XdmfTopologyType_TwoDCoRectMesh)
    __swig_getmethods__["ThreeDSMesh"] = lambda x: _Xdmf.XdmfTopologyType_ThreeDSMesh
    if _newclass:ThreeDSMesh = staticmethod(_Xdmf.XdmfTopologyType_ThreeDSMesh)
    __swig_getmethods__["ThreeDRectMesh"] = lambda x: _Xdmf.XdmfTopologyType_ThreeDRectMesh
    if _newclass:ThreeDRectMesh = staticmethod(_Xdmf.XdmfTopologyType_ThreeDRectMesh)
    __swig_getmethods__["ThreeDCoRectMesh"] = lambda x: _Xdmf.XdmfTopologyType_ThreeDCoRectMesh
    if _newclass:ThreeDCoRectMesh = staticmethod(_Xdmf.XdmfTopologyType_ThreeDCoRectMesh)
    def getNodesPerElement(self): return _Xdmf.XdmfTopologyType_getNodesPerElement(self)
    def getName(self): return _Xdmf.XdmfTopologyType_getName(self)
    def getCellType(self): return _Xdmf.XdmfTopologyType_getCellType(self)
    def __eq__(self, *args): return _Xdmf.XdmfTopologyType___eq__(self, *args)
    def __ne__(self, *args): return _Xdmf.XdmfTopologyType___ne__(self, *args)
    def __init__(self, *args): 
        this = _Xdmf.new_XdmfTopologyType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Xdmf.delete_XdmfTopologyType
    __del__ = lambda self : None;
XdmfTopologyType_swigregister = _Xdmf.XdmfTopologyType_swigregister
XdmfTopologyType_swigregister(XdmfTopologyType)

def XdmfTopologyType_NoTopologyType():
  return _Xdmf.XdmfTopologyType_NoTopologyType()
XdmfTopologyType_NoTopologyType = _Xdmf.XdmfTopologyType_NoTopologyType

def XdmfTopologyType_Polyvertex():
  return _Xdmf.XdmfTopologyType_Polyvertex()
XdmfTopologyType_Polyvertex = _Xdmf.XdmfTopologyType_Polyvertex

def XdmfTopologyType_Polyline():
  return _Xdmf.XdmfTopologyType_Polyline()
XdmfTopologyType_Polyline = _Xdmf.XdmfTopologyType_Polyline

def XdmfTopologyType_Polygon(*args):
  return _Xdmf.XdmfTopologyType_Polygon(*args)
XdmfTopologyType_Polygon = _Xdmf.XdmfTopologyType_Polygon

def XdmfTopologyType_Triangle():
  return _Xdmf.XdmfTopologyType_Triangle()
XdmfTopologyType_Triangle = _Xdmf.XdmfTopologyType_Triangle

def XdmfTopologyType_Quadrilateral():
  return _Xdmf.XdmfTopologyType_Quadrilateral()
XdmfTopologyType_Quadrilateral = _Xdmf.XdmfTopologyType_Quadrilateral

def XdmfTopologyType_Tetrahedron():
  return _Xdmf.XdmfTopologyType_Tetrahedron()
XdmfTopologyType_Tetrahedron = _Xdmf.XdmfTopologyType_Tetrahedron

def XdmfTopologyType_Pyramid():
  return _Xdmf.XdmfTopologyType_Pyramid()
XdmfTopologyType_Pyramid = _Xdmf.XdmfTopologyType_Pyramid

def XdmfTopologyType_Wedge():
  return _Xdmf.XdmfTopologyType_Wedge()
XdmfTopologyType_Wedge = _Xdmf.XdmfTopologyType_Wedge

def XdmfTopologyType_Hexahedron():
  return _Xdmf.XdmfTopologyType_Hexahedron()
XdmfTopologyType_Hexahedron = _Xdmf.XdmfTopologyType_Hexahedron

def XdmfTopologyType_Edge_3():
  return _Xdmf.XdmfTopologyType_Edge_3()
XdmfTopologyType_Edge_3 = _Xdmf.XdmfTopologyType_Edge_3

def XdmfTopologyType_Triangle_6():
  return _Xdmf.XdmfTopologyType_Triangle_6()
XdmfTopologyType_Triangle_6 = _Xdmf.XdmfTopologyType_Triangle_6

def XdmfTopologyType_Quadrilateral_8():
  return _Xdmf.XdmfTopologyType_Quadrilateral_8()
XdmfTopologyType_Quadrilateral_8 = _Xdmf.XdmfTopologyType_Quadrilateral_8

def XdmfTopologyType_Tetrahedron_10():
  return _Xdmf.XdmfTopologyType_Tetrahedron_10()
XdmfTopologyType_Tetrahedron_10 = _Xdmf.XdmfTopologyType_Tetrahedron_10

def XdmfTopologyType_Pyramid_13():
  return _Xdmf.XdmfTopologyType_Pyramid_13()
XdmfTopologyType_Pyramid_13 = _Xdmf.XdmfTopologyType_Pyramid_13

def XdmfTopologyType_Wedge_15():
  return _Xdmf.XdmfTopologyType_Wedge_15()
XdmfTopologyType_Wedge_15 = _Xdmf.XdmfTopologyType_Wedge_15

def XdmfTopologyType_Hexahedron_20():
  return _Xdmf.XdmfTopologyType_Hexahedron_20()
XdmfTopologyType_Hexahedron_20 = _Xdmf.XdmfTopologyType_Hexahedron_20

def XdmfTopologyType_Mixed():
  return _Xdmf.XdmfTopologyType_Mixed()
XdmfTopologyType_Mixed = _Xdmf.XdmfTopologyType_Mixed

def XdmfTopologyType_TwoDSMesh():
  return _Xdmf.XdmfTopologyType_TwoDSMesh()
XdmfTopologyType_TwoDSMesh = _Xdmf.XdmfTopologyType_TwoDSMesh

def XdmfTopologyType_TwoDRectMesh():
  return _Xdmf.XdmfTopologyType_TwoDRectMesh()
XdmfTopologyType_TwoDRectMesh = _Xdmf.XdmfTopologyType_TwoDRectMesh

def XdmfTopologyType_TwoDCoRectMesh():
  return _Xdmf.XdmfTopologyType_TwoDCoRectMesh()
XdmfTopologyType_TwoDCoRectMesh = _Xdmf.XdmfTopologyType_TwoDCoRectMesh

def XdmfTopologyType_ThreeDSMesh():
  return _Xdmf.XdmfTopologyType_ThreeDSMesh()
XdmfTopologyType_ThreeDSMesh = _Xdmf.XdmfTopologyType_ThreeDSMesh

def XdmfTopologyType_ThreeDRectMesh():
  return _Xdmf.XdmfTopologyType_ThreeDRectMesh()
XdmfTopologyType_ThreeDRectMesh = _Xdmf.XdmfTopologyType_ThreeDRectMesh

def XdmfTopologyType_ThreeDCoRectMesh():
  return _Xdmf.XdmfTopologyType_ThreeDCoRectMesh()
XdmfTopologyType_ThreeDCoRectMesh = _Xdmf.XdmfTopologyType_ThreeDCoRectMesh

class XdmfTopology(XdmfItem):
    __swig_setmethods__ = {}
    for _s in [XdmfItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XdmfTopology, name, value)
    __swig_getmethods__ = {}
    for _s in [XdmfItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XdmfTopology, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _Xdmf.XdmfTopology_New
    if _newclass:New = staticmethod(_Xdmf.XdmfTopology_New)
    def getTopologyType(self): return _Xdmf.XdmfTopology_getTopologyType(self)
    def setTopologyType(self, *args): return _Xdmf.XdmfTopology_setTopologyType(self, *args)
    def getNumberElements(self): return _Xdmf.XdmfTopology_getNumberElements(self)
    def setNumberElements(self, *args): return _Xdmf.XdmfTopology_setNumberElements(self, *args)
    def getTopologyTypeAsString(self): return _Xdmf.XdmfTopology_getTopologyTypeAsString(self)
    def getNodesPerElement(self): return _Xdmf.XdmfTopology_getNodesPerElement(self)
    def printSelf(self): return _Xdmf.XdmfTopology_printSelf(self)
    def write(self, *args): return _Xdmf.XdmfTopology_write(self, *args)
XdmfTopology_swigregister = _Xdmf.XdmfTopology_swigregister
XdmfTopology_swigregister(XdmfTopology)

def XdmfTopology_New():
  return _Xdmf.XdmfTopology_New()
XdmfTopology_New = _Xdmf.XdmfTopology_New



